/*! @page q_gettingstarted Getting started
* @tableofcontents
*
* @section q_getos Getting the OS
* Download the latest release from the official repository :
*
* <a style="font-weight:bold" href="https://github.com/kmilo17pet/QuarkTS/releases">QuarkTS++ Releases</a>
* 
* Unpack the release package and add the sources files to your project.
*
* @subsection q_cloneos Cloning QuarkTS++
* You only need to clone the @c kernel branch as follows:
*
* @code{.sh}
* git clone -b kernel https://github.com/kmilo17pet/QuarkTS.git
* @endcode
*
* @subsection q_submodule Including QuarkTS++ as a git sub-module
* Add the OS kernel as a submodule to your project:
*
* @code{.sh}
* git submodule add -b kernel https://github.com/kmilo17pet/QuarkTS.git <destination path>
* @endcode
*
* Then, run the initialize command to fetch the code for the first time:
*
* @code{.sh}
* git submodule update --init
* @endcode
*
* To update the submodule to the latest just run:
*
* @code{.sh}
* git submodule update --remote
* @endcode
*
* @subsection q_getqconfig Get a copy of the OS configuration file
* The file @c qconfig.h provides specific @ref q_configmacros to customize 
* several aspects of the OS. In order to build your solution with QuarkTS++, you 
* should provided your own copy of this configuration file. You can obtain a copy
* with the default configuration by issuing the following command:
*
* @code{.sh}
* curl https://raw.githubusercontent.com/kmilo17pet/QuarkTS/master/src/config/qconfig.h -o <destination path>/qconfig.h
* @endcode
*
 @section q_firststeps First steps
* Include the source files to your project. Also, make sure you add a copy of 
* the file @c qconfig.h and modify it according to your needs. Setup your 
* compiler including the path of the OS directory. Include the header file 
* @c quarkts++.h and setup the instance of the kernel using the qOS_Setup() 
* inside the main thread to initialize te kernel, specify the reference clock and 
* the idle-task ( see @ref q_timmingapproach). Additional configuration to the 
* target compiler may be required to add the path to the directory of header files.
* The code below shows a common initialization procedure  in the main source file.
*
* File @c main.c
*  @code{.c}
*  #include "quarkts++.h"
*  using namespace qOS;
* 
*  void main( void ) {
*      //device startup with hardware-specific code
*      HardwareSetup();
*      Configure_Periodic_Timer_Interrupt_1ms();
*      //end of device startup with hardware-specific code
*      os.init( nullptr , IdleTask_Callback );
*      // TODO: add Tasks to the scheduler scheme and run the OS
*  }
*  @endcode
*
* In the above code, the following considerations should be taken:
* - The function qOS_Setup() must be called before any interaction with the OS.
* - The procedure @c HardwareSetup() should be a function with all the hardware 
* instructions needed to initialize the target system.
* - The procedure @c Configure_Periodic_Timer_Interrupt_1ms() should be a 
* function with all the hardware instructions needed to initialize and enable a 
* timer with an overflow tick of one millisecond.
*
* Tasks can be later added to the scheduling scheme by simply calling 
* qOS_Add_Task() or any of the other available APIs for specific purpose tasks.
*
* @section q_os_demo Two simple demonstrative examples
*
* @subsection q_os_example1 A simple scheduling
* This example demonstrates a simple environment setup for multiple tasks. 
* Initially, only @c task1 and @c task2 are enabled. @c task1 runs every 2 
* seconds 10 times and then stops. @c task2 runs every 3 seconds indefinitely. 
* @c task1 enables @c task3 at its first run. @c task3 run every  5 seconds. 
* @c task1 disables @c task3 on its last iteration and change @c task2 to run 
* every 1/2 seconds. In the end, @c task2 is the only task running every 1/2 
* seconds.
*
*  @code{.c}
*  #include <cstdio>
*  #include <cstdlib>
*  #include <cstdint>
*  #include "BSP.h"
*  
*  #include "quarkts++.h"
*  using namespace qOS;
*  
*  task task1, task2, task3; /*task nodes*/
*  /*==================================================================*/
*  void interrupt Timer0_ISR( void ) {
*      clock::sysTick();
*  }
*  /*==================================================================*/
*  void Task1_Callback( event_t e ) {
*      BSP_UART1_WriteString( e.self().getName() );
*  
*      if ( e.firstIteration() ) {
*          task3.setState( taskState::ENABLED );
*      }
*      
*      if ( e->LastIteration ) {
*          e.self().setState( taskState::SUSPENDED );
*          e.self().setTime( 500 );
*      }
*  }
*  /*==================================================================*/
*  void Task2_Callback( event_t e ) {
*      BSP_UART1_WriteString( e.self().getName() );
*  }
*  /*==================================================================*/
*  void Task3_Callback( qEvent_t e ) {
*      BSP_UART1_WriteString( e.self().getName() );
*  }
*  /*==================================================================*/
*  int main( void ) {
*      HardwareSetup();  /*hardware initialization function*/
*      /*function to fire an interrupt at 1ms - timer tick*/
*      Configure_Periodic_Timer0_Interrupt_1ms();
*      
*      os.init( nullptr, nullptr );
*      os.addTask( Task1, Task1_Callback, 50, 2000, 10, taskState::ENABLED );
*      os.addTask( Task2, Task2_Callback, 50, 3000, task::PERIODIC, taskState::ENABLED );
*      os.addTask( Task2, Task3_Callback, 50, 5000, task::PERIODIC, taskState::DISABLED );
*      os.run();
*
*      return 0;
*  }
*  @endcode
*
* @subsection q_os_example2 Using the task argument
* When adding tasks, they can accept a parameter of type pointer to void @c void*
* also called the storage pointer. This parameter could be used for multiple 
* applications, including storage, task identification, duplication removal and
* others. The following example shows the usage of this argument to avoid 
* callback duplication among tasks with the same behavior.
*
* Consider a scenario where you have to build a digital controller for several 
* physical variables, for example, a PID controller for temperature, humidity and
* light. The PID algorithm will be the same for all variables. The only 
* difference will be the variable input, the controlled output action and the 
* PID gains. In this case, each of the PID tasks will utilize the same callback 
* methods. The only difference will be the I/O parameters (specific for each 
* PID controller).
*
* Letâ€™s define a PID data structure with the I/O variables and gains.
*
*  @code{.c}
*  typedef struct {
*       float yt; /*Measured variable (Controller Input)*/
*       float ut; /*Controlled variable (Controller Output)*/
*       float ie; /*Accumulated error*/
*       float pe; /*Previous error*/
*       float dt; /*Controller Time Step*/
*       float sp; /*Set-Point*/
*       float Kc, Ki, Kd; /*PID Gains*/
*   } PID_Params_t;
*   
*   PID_Params_t TemperatureControl = {
*      0.0f, 0.0f, 0.0f, 0.0f, /*Initial IO state of yt and ut*/
*      1.5f, /*time step*/
*      28.5f, /*Set-Point*/
*      0.89f, 0.122f, 0.001f /*Kc, Ki, Kd*/
*   };
*   PID_Params_t HumidityControl= {
*      0.0f, 0.0f, 0.0f, 0.0f, /*Initial IO state of yt and ut*/
*      1.0f, /*time step*/
*      60.0f, /*Set-Point*/
*      2.5f, 0.2354f, 0.0015f /*Kc, Ki, Kd*/
*   };
*   PID_Params_t LightControl= {
*      0.0f, 0.0f, 0.0f, 0.0f, /*Initial IO state of yt and ut*/
*      0.5f, /*time step*/
*      45.0f, /*Set-Point*/
*      5.36f, 0.0891f, 0.0f /*Kc, Ki, Kd*/
*   };
*  @endcode
*
* A task will be added to the scheme to collect the sensor data and apply 
* the respective control output.
*
*  @code{.c}
*  qOS_Add_Task( &IO_TASK , IO_TASK_Callback , qMedium_Priority , 0.1, qPeriodic, qEnabled , "iotask");
*  @endcode
*
*  @code{.c}
*  void IO_TASK_Callback( qEvent_t e ) {
*      TemperatureControl.yt = SampleTemperatureSensor();
*      HumidityControl.yt = SampleHumiditySensor();
*      LightControl.yt = SampleLightSensor();
*      WriteTemperatureActuatorValue( TemperatureControl.ut );
*      WriteHumidityActuatorValue( HumidityControl.ut );
*      WriteLightActuatorValue( LightControl.ut );
*  }
*  @endcode
*
* Then, three different tasks are created to apply the respective PID controller. 
* Note that these tasks refer to the same callback method and we assign 
* pointers to the respective variables.
*
*  @code{.c}
*  qOS_Add_Task( &TEMPERATURE_CONTROL_TASK, PIDControl_Callback,
*                qHigh_Priority, TemperatureControl.dt ,
*                qPeriodic, qEnabled, &TemperatureControl );
*  qOS_Add_Task( &HUMIDITY_CONTROL_TASK, PIDControl_Callback,
*                qHigh_Priority, HumidityControl.dt,
*                qPeriodic, qEnabled, &HumidityControl );
*  qOS_Add_Task( &LIGHT_CONTROL_TASK, PIDControl_Callback,
*                qHigh_Priority, LightControl.dt,
*                qPeriodic, qEnabled, &LightControl );
*  @endcode
*
*  @code{.c}
*  void PIDControl_Callback( qEvent_t e ) {
*      float Error, derivative;
*      /* Obtain the reference to the specific PID controller
*       * using the TaskData field from the qEvent structure
*       */
*      PID_Params_t *Controller = (PID_Params_t *)e->TaskData;
*      /*Compute the error*/
*      Error = Controller->sp - Controller->yt;
*      /*Compute the accumulated error using backward integral approximation*/
*      Controller->ie += Error*Controller->dt;
*      /*update and compute the derivative term*/
*      derivative = ( Error - Controller->pe )/Controller->dt;
*      /*update the previous error*/
*      Controller->pe = Error;
*      /*compute the pid control law*/
*      Controller->ut = Controller->Kc*Error + Controller->Ki*Controller->ie + Controller->Kd*derivative;
*  }
*  @endcode
*
*/