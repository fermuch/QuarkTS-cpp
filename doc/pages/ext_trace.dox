/*! @page q_trace Trace/Debugging
* @tableofcontents
*
* @section q_trace_overview Overview
* QuarkTS++ include some basic macros to print out debugging messages. Messages 
* can be simple text or the value of variables in specific base formats. 
* To use the trace macros, a single-char output function must be defined using
* the trace::setOutputFcn() function.
*
* A single-char output function should follow this prototype:
*
*  @code{.c}
*  void SingleChar_OutputFcn ( void *sp , const char c ) {
*      /* TODO : print out the c variable using the
*       * selected peripheral.
*       */
*  }
*  @endcode
*
* The body of this user-defined function should have a hardware-dependent code 
* to print out the @c c variable through a specific peripheral.
*
* @section q_trace_viewvars Viewing variables
* For viewing or tracing a variable (up to 32-bit data) through debug, one of 
* the following statements are available: trace::log or trace::msg.
*
* The only difference between trace::log and trace::msg, is that trace starting
* with @c log , print out additional information provided by the @c __FILE__ , 
* @c __LINE__ and @c __func__ built-in preprocessing macros, mostly available 
* in common C++ compilers.
*
* @section q_trace_mblock Viewing a memory block
* For tracing memory from a specified target address, you should use the trace::mem()
* specifier to define the number of bytes to be visualized of the memory block 
* that shuold be given after as a pointer.
*
* @section q_trace_usage Usage
* In the example below, an UART output function is coded to act as the printer.
* Here, the target MCU is an ARM-Cortex M0 with the UART1 as the selected 
* peripheral for this purpose.
*
*  @code{.c}
*  int main( void ) {
*      uint16_t block[ 4 ] = { 451, 477, 1025, 354 };
*      float other = 4.5f;
*
*      trace::setOutputFcn( putUART1 );
*      trace::log << mem( sizeof(block) ) << block << trace::endl;
*      trace::log << mem( sizeof(float) ) << &other << trace::endl;
*  }
*  @endcode
*
*  @code{.c}
*  void putUART1 ( void *sp , const char c ) {
*      /* hardware specific code */
*      UART1_D = c;
*      while ( !( UART1_S1 & UART_S1_TC_MASK ) ) {} /*wait until TX is done*/
*  }
*  @endcode
*
* As seen above, the function follows the required prototype. Later, in the 
* main thread, a call to qTrace_Set_OutputFcn() is used to set up the
* output-function.
*
*  @code{.c}
*  int main( void ) {
*      trace::setOutputFcn( putUART1 );
*      ...
*      ...
*  }
*  @endcode
*
* After that, trace macros will be available for use.
*
*  @code{.c}
*  void IO_TASK_Callback ( event_t e ) {
*      static uint32_t Counter = 0;
*      float Sample;
*      ...
*      ...
*      trace::log << "IO TASK running..." << trace::endl;
*      Counter++;
*      trace::log << Counter << trace::endl;
*      Sample = SensorGetSample ();
*      trace::log << Sample << trace::endl;
*      ...
*      ...
*  }
*  @endcode
*
*/